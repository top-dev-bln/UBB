        -:    0:Source:/mnt/c/Users/Ovidiu/CLionProjects/LAB5SPERANTA/tests.c
        -:    0:Graph:/mnt/c/Users/Ovidiu/CLionProjects/LAB5SPERANTA/cmake-build-debug-coverage/CMakeFiles/LAB5SPERANTA.dir/tests.c.gcno
        -:    0:Data:/mnt/c/Users/Ovidiu/CLionProjects/LAB5SPERANTA/cmake-build-debug-coverage/CMakeFiles/LAB5SPERANTA.dir/tests.c.gcda
        -:    0:Runs:1
        -:    1:﻿#include "tests.h"
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include "controller.h"
        -:    5:#include "repo.h"
        -:    6:#include "oferta.h"
        -:    7:
function testCopyList called 1 returned 100% blocks executed 83%
        1:    8:void testCopyList() {
        -:    9:	/* Testează funcția de copiere a unei liste de oferte */
        1:   10:	MyList* v1 = createEmpty();
        1:   10-block  0
call    0 returned 1
        1:   11:	add(v1, createOferta(1, "casa", 100, "Florilor,nr.7", 15000));
call    0 returned 1
call    1 returned 1
        1:   12:	add(v1, createOferta(2, "apartament", 100, "Florilor,nr.7", 18000));
call    0 returned 1
call    1 returned 1
        -:   13:
       1*:   14:	assert(size(v1) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   14-block  0
call    3 never executed
        1:   15:	MyList* v2 = copyList(v1, copyOferta); 
        1:   15-block  0
call    0 returned 1
        -:   16:
       1*:   17:	assert(size(v2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   17-block  0
call    3 never executed
        1:   18:	Oferta* o = get(v2, 0);
        1:   18-block  0
call    0 returned 1
       1*:   19:	assert(strcmp(o->adresa, "Florilor,nr.7") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  0
call    2 never executed
        -:   20:
        1:   21:	destroy(v1, (void (*)(void*))destroyOferta);
        1:   21-block  0
call    0 returned 1
        1:   22:	destroy(v2, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:   23:}
        -:   24:
function testAddService called 1 returned 100% blocks executed 68%
        1:   25:void testAddService() {
        -:   26:	/* Testează funcția de adăugare a unei oferte */
        1:   27:	MyList* v = createEmpty();
        1:   27-block  0
call    0 returned 1
        1:   28:	MyList* undo_list = createEmpty();
call    0 returned 1
       1*:   29:	assert(addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   29-block  0
call    3 never executed
       1*:   30:	assert(addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 12000) == 0);
        1:   30-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   30-block  1
call    3 never executed
        -:   31:
       1*:   32:	assert(size(v) == 1);
        1:   32-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   32-block  1
call    3 never executed
        1:   33:	Oferta* o = get(v, 0);
        1:   33-block  0
call    0 returned 1
        -:   34:
       1*:   35:	assert(o->id == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   35-block  0
call    2 never executed
       1*:   36:	assert(strcmp(o->tip, "casa") == 0);
        1:   36-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   36-block  1
call    2 never executed
       1*:   37:	assert(o->suprafata== 100);
        1:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  1
call    2 never executed
       1*:   38:	assert(strcmp(o->adresa, "Florilor,nr.7") == 0);
        1:   38-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  1
call    2 never executed
       1*:   39:	assert(o->pret == 15000);
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   39-block  1
call    2 never executed
        -:   40:
        1:   41:	destroy(v, (void (*)(void*))destroyOferta);
        1:   41-block  0
call    0 returned 1
        1:   42:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:   43:}
        -:   44:
function testFindService called 1 returned 100% blocks executed 75%
        1:   45:void testFindService() {
        -:   46:	/* Testează funcția de găsire a unei oferte */
        1:   47:	MyList* v = createEmpty();
        1:   47-block  0
call    0 returned 1
        1:   48:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:   49:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:   50:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
        -:   51:
        1:   52:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7",15000);
        1:   52-block  0
call    0 returned 1
       1*:   53:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   53-block  0
call    2 never executed
        -:   54:
        1:   55:	int succes3 = addOferta(v, undo_list, 3, "teren", 100, "Florilor,nr.7", 15000);
        1:   55-block  0
call    0 returned 1
       1*:   56:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   56-block  0
call    2 never executed
        -:   57:
       1*:   58:	assert(size(v) == 3);
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  1
call    3 never executed
        1:   59:	int poz = findOferta(v, 2);
        1:   59-block  0
call    0 returned 1
        -:   60:
       1*:   61:	assert(poz == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   61-block  0
call    2 never executed
        -:   62:
        1:   63:	destroy(v, (void (*)(void*))destroyOferta);
        1:   63-block  0
call    0 returned 1
        1:   64:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:   65:}
        -:   66:
function testModifyService called 1 returned 100% blocks executed 74%
        1:   67:void testModifyService() {
        -:   68:	/* Testează funcția de modificare a unei oferte */
        1:   69:	MyList* v = createEmpty();
        1:   69-block  0
call    0 returned 1
        1:   70:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:   71:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:   72:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   72-block  0
call    2 never executed
        -:   73:
        1:   74:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7", 15000);
        1:   74-block  0
call    0 returned 1
       1*:   75:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   75-block  0
call    2 never executed
        -:   76:
        1:   77:	int succes3 = addOferta(v, undo_list, 3, "teren", 100, "Florilor,nr.7", 15000);
        1:   77-block  0
call    0 returned 1
       1*:   78:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  0
call    2 never executed
        -:   79:
       1*:   80:	assert(size(v) == 3);
        1:   80-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   80-block  1
call    3 never executed
        1:   81:	int mod_of1 = modifyOferta(v, undo_list, 2, "apartament", 100, "Stejarului,nr.101", 18000);
        1:   81-block  0
call    0 returned 1
       1*:   82:	assert(mod_of1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   82-block  0
call    2 never executed
        -:   83:
        1:   84:	int mod_of2 = modifyOferta(v, undo_list, 4, "apartament", 100, "Stejarului,nr.101", 18000);
        1:   84-block  0
call    0 returned 1
       1*:   85:	assert(mod_of2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  0
call    2 never executed
        -:   86:
        -:   87:	/*int mod_of3 = modifyOferta(v, undo_list, 1, "skibidi", 100, "Stejarului,nr.101", 18000);
        -:   88:	assert(mod_of3 == 2);
        -:   89:
        -:   90:	int mod_of4 = modifyOferta(v, undo_list, 1, "apartament", -100, "Stejarului,nr.101", 18000);
        -:   91:	assert(mod_of4 == 3);
        -:   92:
        -:   93:	int mod_of5 = modifyOferta(v, undo_list, 1, "apartament", 100, "101", 18000);
        -:   94:	assert(mod_of5 == 4);
        -:   95:
        -:   96:	int mod_of6 = modifyOferta(v, undo_list, 1, "apartament", 100, "Stejarului,nr.101", -18000);
        -:   97:	assert(mod_of6 == 5);*/
        -:   98:
        1:   99:	destroy(v, (void (*)(void*))destroyOferta);
        1:   99-block  0
call    0 returned 1
        1:  100:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  101:}
        -:  102:
function testDeleteService called 1 returned 100% blocks executed 74%
        1:  103:void testDeleteService() {
        -:  104:	/* Testează funcția de ștergere a unei oferte */
        1:  105:	MyList* v = createEmpty();
        1:  105-block  0
call    0 returned 1
        1:  106:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:  107:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:  108:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  108-block  0
call    2 never executed
        -:  109:
        1:  110:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7", 15000);
        1:  110-block  0
call    0 returned 1
       1*:  111:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  111-block  0
call    2 never executed
        -:  112:
        1:  113:	int succes3 = addOferta(v, undo_list, 3, "teren", 100, "Florilor,nr.7", 15000);
        1:  113-block  0
call    0 returned 1
       1*:  114:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  114-block  0
call    2 never executed
        -:  115:
       1*:  116:	assert(size(v) == 3);
        1:  116-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  116-block  1
call    3 never executed
        1:  117:	int succes_del1 = deleteOferta(v, undo_list, 2);
        1:  117-block  0
call    0 returned 1
       1*:  118:	assert(succes_del1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  118-block  0
call    2 never executed
        1:  119:	int succes_del2 = deleteOferta(v, undo_list, 5);
        1:  119-block  0
call    0 returned 1
       1*:  120:	assert(succes_del2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  120-block  0
call    2 never executed
        1:  121:	destroy(v, (void (*)(void*))destroyOferta);
        1:  121-block  0
call    0 returned 1
        1:  122:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  123:}
        -:  124:
function testareaFilter called 1 returned 100% blocks executed 78%
        1:  125:void testareaFilter() {
        -:  126:	/* Testează funcția de filtrare a ofertelor după suprafata */
        1:  127:	MyList* v = createEmpty();
        1:  127-block  0
call    0 returned 1
        1:  128:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:  129:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:  130:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  130-block  0
call    2 never executed
        -:  131:
        1:  132:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7", 15000);
        1:  132-block  0
call    0 returned 1
       1*:  133:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  133-block  0
call    2 never executed
        -:  134:
        1:  135:	int succes3 = addOferta(v, undo_list, 3, "teren", 200, "Florilor,nr.7", 15000);
        1:  135-block  0
call    0 returned 1
       1*:  136:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  136-block  0
call    2 never executed
        -:  137:
       1*:  138:	assert(size(v) == 3);
        1:  138-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  138-block  1
call    3 never executed
        1:  139:	MyList* filteredList = areaFilter(v, 100);
        1:  139-block  0
call    0 returned 1
       1*:  140:	assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  140-block  0
call    3 never executed
        1:  141:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  141-block  0
call    0 returned 1
        -:  142:
        1:  143:	filteredList = areaFilter(v, -1);
call    0 returned 1
       1*:  144:	assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  144-block  0
call    3 never executed
        1:  145:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  145-block  0
call    0 returned 1
        -:  146:
        1:  147:	destroy(v, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:  148:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  149:}
        -:  150:
function testtipFilter called 1 returned 100% blocks executed 78%
        1:  151:void  testtipFilter() {
        -:  152:	/* Testează funcția de filtrare a ofertelor după tip */
        1:  153:	MyList* v = createEmpty();
        1:  153-block  0
call    0 returned 1
        1:  154:	MyList* undo_list = createEmpty();
call    0 returned 1
        -:  155:
        1:  156:	int succes1 = addOferta(v, undo_list, 1, "teren", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:  157:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  157-block  0
call    2 never executed
        -:  158:
        1:  159:	int succes2 = addOferta(v, undo_list, 2, "casa", 100, "Florilor,nr.7", 15000);
        1:  159-block  0
call    0 returned 1
       1*:  160:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  160-block  0
call    2 never executed
        -:  161:
        1:  162:	int succes3 = addOferta(v, undo_list, 3, "teren", 200, "Florilor,nr.7", 15000);
        1:  162-block  0
call    0 returned 1
       1*:  163:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  0
call    2 never executed
        -:  164:
       1*:  165:	assert(size(v) == 3);
        1:  165-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  165-block  1
call    3 never executed
        1:  166:	MyList* filteredList = tipFilter(v, "teren");
        1:  166-block  0
call    0 returned 1
       1*:  167:	assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  167-block  0
call    3 never executed
        1:  168:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  168-block  0
call    0 returned 1
        -:  169:
        1:  170:	filteredList = tipFilter(v, "");
call    0 returned 1
       1*:  171:	assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  171-block  0
call    3 never executed
        1:  172:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  172-block  0
call    0 returned 1
        -:  173:
        1:  174:	destroy(v, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:  175:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  176:}
        -:  177:
function testpretFilter called 1 returned 100% blocks executed 78%
        1:  178:void testpretFilter() {
        -:  179:	/* Testează funcția de filtrare a ofertelor după preț */
        1:  180:	MyList* v = createEmpty();
        1:  180-block  0
call    0 returned 1
        1:  181:	MyList* undo_list = createEmpty();
call    0 returned 1
        -:  182:
        1:  183:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:  184:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  184-block  0
call    2 never executed
        -:  185:
        1:  186:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7", 15000);
        1:  186-block  0
call    0 returned 1
       1*:  187:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
        -:  188:
        1:  189:	int succes3 = addOferta(v, undo_list, 3, "teren", 100, "Florilor,nr.7", 158000);
        1:  189-block  0
call    0 returned 1
       1*:  190:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  0
call    2 never executed
        -:  191:
       1*:  192:	assert(size(v) == 3);
        1:  192-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  192-block  1
call    3 never executed
        1:  193:	MyList* filteredList = pretFilter(v, 15000);
        1:  193-block  0
call    0 returned 1
       1*:  194:	assert(size(filteredList) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  194-block  0
call    3 never executed
        1:  195:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  195-block  0
call    0 returned 1
        -:  196:
        1:  197:	filteredList = pretFilter(v, 0);
call    0 returned 1
       1*:  198:	assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  198-block  0
call    3 never executed
        1:  199:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  199-block  0
call    0 returned 1
        -:  200:
        1:  201:	destroy(v, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:  202:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  203:}
        -:  204:
function testadressFilter called 1 returned 100% blocks executed 79%
        1:  205:void testadressFilter()
        -:  206:{
        -:  207:	/* Testează funcția de filtrare a ofertelor după adresa */
        1:  208:	MyList* v = createEmpty();
        1:  208-block  0
call    0 returned 1
        1:  209:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:  210:	int succes1 = addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 15000);
call    0 returned 1
       1*:  211:	assert(succes1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  211-block  0
call    2 never executed
        1:  212:	int succes2 = addOferta(v, undo_list, 2, "apartament", 100, "Florilor,nr.7", 15000);
        1:  212-block  0
call    0 returned 1
       1*:  213:	assert(succes2 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  213-block  0
call    2 never executed
        1:  214:	int succes3 = addOferta(v, undo_list, 3, "teren", 100, "Florilor,nr.7", 158000);
        1:  214-block  0
call    0 returned 1
       1*:  215:	assert(succes3 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  215-block  0
call    2 never executed
       1*:  216:	assert(size(v) == 3);
        1:  216-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  216-block  1
call    3 never executed
        1:  217:	MyList* filteredList = adressFilter(v, "Florilor,nr.7");
        1:  217-block  0
call    0 returned 1
       1*:  218:	assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  218-block  0
call    3 never executed
        1:  219:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  219-block  0
call    0 returned 1
        1:  220:	filteredList = adressFilter(v, "Florilor,nr.8");
call    0 returned 1
       1*:  221:	assert(size(filteredList) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  221-block  0
call    3 never executed
        1:  222:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  222-block  0
call    0 returned 1
        -:  223:
        1:  224:	filteredList = adressFilter(v, "");
call    0 returned 1
       1*:  225:	assert(size(filteredList) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  225-block  0
call    3 never executed
        4:  226:	for (int i = 0; i < filteredList->length; i++)
        1:  226-block  0
        3:  226-block  1
        4:  226-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:  227:	{
        3:  228:		Oferta* o = get(filteredList, i);
        3:  228-block  0
call    0 returned 3
       3*:  229:		assert(strcmp(o->adresa, "Florilor,nr.7") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:  229-block  0
call    2 never executed
        -:  230:	}
        1:  231:	destroy(filteredList, (void (*)(void*))destroyOferta);
        1:  231-block  0
call    0 returned 1
        1:  232:	destroy(v, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:  233:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  234:}
        -:  235:
function testSortByPrice called 1 returned 100% blocks executed 79%
        1:  236:void testSortByPrice() {
        -:  237:	/* Testează funcția de sortare a ofertelor după preț */
        1:  238:	MyList* v = createEmpty();
        1:  238-block  0
call    0 returned 1
        1:  239:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:  240:	addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 500);
call    0 returned 1
        1:  241:	addOferta(v, undo_list, 2, "apartament", 200, "Florilor,nr.7", 300);
call    0 returned 1
        1:  242:	addOferta(v, undo_list, 3, "teren", 300, "Florilor,nr.7", 700);
call    0 returned 1
        -:  243:
        1:  244:	sortOferte(v, 1, 1); // Sortare crescătoare după preț
call    0 returned 1
       1*:  245:	assert(((Oferta*)get(v, 0))->pret == 300);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  245-block  0
call    3 never executed
       1*:  246:	assert(((Oferta*)get(v, 1))->pret == 500);
        1:  246-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  246-block  1
call    3 never executed
       1*:  247:	assert(((Oferta*)get(v, 2))->pret == 700);
        1:  247-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  247-block  1
call    3 never executed
        -:  248:
        1:  249:	sortOferte(v, 1, 2); // Sortare descrescătoare după preț
        1:  249-block  0
call    0 returned 1
       1*:  250:	assert(((Oferta*)get(v, 0))->pret == 700);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  250-block  0
call    3 never executed
       1*:  251:	assert(((Oferta*)get(v, 1))->pret == 500);
        1:  251-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  251-block  1
call    3 never executed
       1*:  252:	assert(((Oferta*)get(v, 2))->pret == 300);
        1:  252-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  252-block  1
call    3 never executed
        -:  253:
        -:  254:
        1:  255:	destroy(v, (void (*)(void*))destroyOferta);
        1:  255-block  0
call    0 returned 1
        1:  256:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  257:}
        -:  258:
function testSortByType called 1 returned 100% blocks executed 100%
        1:  259:void testSortByType() {
        -:  260:	/* Testează funcția de sortare a ofertelor după destinație */
        1:  261:	MyList* v = createEmpty();
        1:  261-block  0
call    0 returned 1
        1:  262:	MyList* undo_list = createEmpty();
call    0 returned 1
        1:  263:	addOferta(v, undo_list, 1, "casa", 100, "Florilor,nr.7", 500);
call    0 returned 1
        1:  264:	addOferta(v, undo_list, 2, "apartament", 200, "Florilor,nr.7", 300);
call    0 returned 1
        1:  265:	addOferta(v, undo_list, 3, "teren", 300, "Florilor,nr.7", 700);
call    0 returned 1
        -:  266:
        1:  267:	sortOferte(v, 2, 1); // Sortare crescătoare după destinație
call    0 returned 1
        -:  268:
        1:  269:	destroy(v, (void (*)(void*))destroyOferta);
call    0 returned 1
        1:  270:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  271:}
        -:  272:
        -:  273:
function testCreateOferta called 1 returned 100% blocks executed 62%
        1:  274:void testCreateOferta() {
        -:  275:	/* Testează funcția de creare a unei oferte */
        1:  276:	Oferta* o = createOferta(1, "casa", 100, "Florilor,nr.7", 500);
        1:  276-block  0
call    0 returned 1
       1*:  277:	assert(o->id == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  277-block  0
call    2 never executed
       1*:  278:	assert(strcmp(o->tip, "casa") == 0);
        1:  278-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  278-block  1
call    2 never executed
       1*:  279:	assert(o->suprafata == 100);
        1:  279-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  279-block  1
call    2 never executed
       1*:  280:	assert(strcmp(o->adresa, "Florilor,nr.7") == 0);
        1:  280-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  280-block  1
call    2 never executed
       1*:  281:	assert(o->pret == 500);
        1:  281-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  281-block  1
call    2 never executed
        -:  282:
        1:  283:	destroyOferta(o);
        1:  283-block  0
call    0 returned 1
        1:  284:}
        -:  285:
function testEsteAdresaValida called 1 returned 100% blocks executed 69%
        1:  286:void testEsteAdresaValida() {
       1*:  287:	assert(esteAdresaValida("Lalelelor,nr.3") == 1);
        1:  287-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  287-block  1
call    3 never executed
       1*:  288:	assert(esteAdresaValida("StradaMare,nr.10") == 1);
        1:  288-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  288-block  1
call    3 never executed
       1*:  289:	assert(esteAdresaValida("123,nr.4") == 0);
        1:  289-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  289-block  1
call    3 never executed
       1*:  290:	assert(esteAdresaValida("Strada,nr.") == 0);
        1:  290-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  290-block  1
call    3 never executed
       1*:  291:	assert(esteAdresaValida("PiataUnirii,nr.5") == 1);
        1:  291-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  291-block  1
call    3 never executed
        1:  292:}
function testValideazaOferta called 1 returned 100% blocks executed 81%
        1:  293:void testValideazaOferta() {
        -:  294:	/* Testează funcția de validare a unei oferte */
        1:  295:	Oferta* o1 = createOferta(1, "casa", 100, "Florilor,nr.7", 500);
        1:  295-block  0
call    0 returned 1
       1*:  296:	assert(valideazaOferta(o1) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  296-block  0
call    3 never executed
        1:  297:	destroyOferta(o1);
        1:  297-block  0
call    0 returned 1
        -:  298:
        1:  299:	Oferta* o2 = createOferta(2, "apartment", 100, "Mihai Viteazu,nr.15", 600); // Tip invalid
call    0 returned 1
       1*:  300:	assert(valideazaOferta(o2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  300-block  0
call    3 never executed
        1:  301:	destroyOferta(o2);
        1:  301-block  0
call    0 returned 1
        -:  302:
        1:  303:	Oferta* o3 = createOferta(3, "teren", -100, "Stejarului,nr.101", 400); // Suprafata invalida
call    0 returned 1
       1*:  304:	assert(valideazaOferta(o3) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  304-block  0
call    3 never executed
        1:  305:	destroyOferta(o3);
        1:  305-block  0
call    0 returned 1
        -:  306:
        1:  307:	Oferta* o4 = createOferta(4, "casa",200, "40", 700); // Data invalida
call    0 returned 1
       1*:  308:	assert(valideazaOferta(o4) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  308-block  0
call    3 never executed
        1:  309:	destroyOferta(o4);
        1:  309-block  0
call    0 returned 1
        -:  310:
        1:  311:	Oferta* o5 = createOferta(5, "apartament", 300, "Eroilor,nr.2", -100); // Pret invalid
call    0 returned 1
       1*:  312:	assert(valideazaOferta(o5) == 5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  312-block  0
call    3 never executed
        1:  313:	destroyOferta(o5);
        1:  313-block  0
call    0 returned 1
        1:  314:}
        -:  315:
function testResize called 1 returned 100% blocks executed 74%
        1:  316:void testResize() {
        -:  317:	/* Testează funcția de redimensionare a listei */
        1:  318:	MyList* v = createEmpty();
        1:  318-block  0
call    0 returned 1
        -:  319:
       21:  320:	for (int i = 0; i < 20; i++) {
       21:  320-block  0
branch  0 taken 20
branch  1 taken 1 (fallthrough)
       20:  321:		Oferta* o = createOferta(i, "casa",100, "Eroilor,nr.2", 15000);
       20:  321-block  0
call    0 returned 20
       20:  322:		add(v, o);
call    0 returned 20
        -:  323:	}
        -:  324:
       1*:  325:	assert(v->capacity == 20); 
        1:  325-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  325-block  1
call    2 never executed
        -:  326:
       1*:  327:	assert(size(v) == 20);
        1:  327-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  327-block  1
call    3 never executed
        -:  328:
       21:  329:	for (int i = 0; i < 20; i++) {
        1:  329-block  0
       20:  329-block  1
       21:  329-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
       20:  330:		Oferta* o = get(v, i);
       20:  330-block  0
call    0 returned 20
      20*:  331:		assert(o->id == i);
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%:  331-block  0
call    2 never executed
      20*:  332:		assert(strcmp(o->tip, "casa") == 0);
       20:  332-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%:  332-block  1
call    2 never executed
      20*:  333:		assert(o->suprafata== 100);
       20:  333-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%:  333-block  1
call    2 never executed
      20*:  334:		assert(strcmp(o->adresa, "Eroilor,nr.2") == 0);
       20:  334-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%:  334-block  1
call    2 never executed
      20*:  335:		assert(o->pret == 15000);
       20:  335-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%:  335-block  1
call    2 never executed
        -:  336:	}
        1:  337:	destroy(v, (void (*)(void*))destroyOferta);
        1:  337-block  0
call    0 returned 1
        1:  338:}
        -:  339:
function testUndo called 1 returned 100% blocks executed 67%
        1:  340:void testUndo()
        -:  341:{
        -:  342:	/* Testează funcția de undo */
        1:  343:	MyList* v = createEmpty();
        1:  343-block  0
call    0 returned 1
        1:  344:	MyList* undo_list = createEmpty();
call    0 returned 1
        -:  345:
       1*:  346:	assert(undo(&v, undo_list) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  346-block  0
call    3 never executed
        -:  347:
        1:  348:	addOferta(v, undo_list, 1, "casa", 100, "Eroilor,nr.2", 500);
        1:  348-block  0
call    0 returned 1
        1:  349:	addOferta(v, undo_list, 2, "apartament", 200, "Stejarului,nr.101", 300);
call    0 returned 1
        1:  350:	addOferta(v, undo_list, 3, "teren", 300, "Eroilor,nr.2", 700);
call    0 returned 1
       1*:  351:	assert(undo(&v, undo_list) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  351-block  0
call    3 never executed
       1*:  352:	assert(size(v) == 2);
        1:  352-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  352-block  1
call    3 never executed
        -:  353:
        1:  354:	Oferta* o1 = get(v, 0);
        1:  354-block  0
call    0 returned 1
       1*:  355:	assert(o1->id == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  355-block  0
call    2 never executed
       1*:  356:	assert(strcmp(o1->tip, "casa") == 0);
        1:  356-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  356-block  1
call    2 never executed
       1*:  357:	assert(o1->suprafata == 100);
        1:  357-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  357-block  1
call    2 never executed
       1*:  358:	assert(strcmp(o1->adresa, "Eroilor,nr.2") == 0);
        1:  358-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  358-block  1
call    2 never executed
       1*:  359:	assert(o1->pret == 500);
        1:  359-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  359-block  1
call    2 never executed
        1:  360:	Oferta* o2 = get(v, 1);
        1:  360-block  0
call    0 returned 1
       1*:  361:	assert(o2->id == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  361-block  0
call    2 never executed
       1*:  362:	assert(strcmp(o2->tip, "apartament") == 0);
        1:  362-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  362-block  1
call    2 never executed
       1*:  363:	assert(o2->suprafata == 200);
        1:  363-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  363-block  1
call    2 never executed
       1*:  364:	assert(strcmp(o2->adresa, "Stejarului,nr.101") == 0);
        1:  364-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  364-block  1
call    2 never executed
       1*:  365:	assert(o2->pret == 300);
        1:  365-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  365-block  1
call    2 never executed
        1:  366:	destroy(v, (void (*)(void*))destroyOferta);
        1:  366-block  0
call    0 returned 1
        1:  367:	destroy(undo_list, destroyOfertaLista);
call    0 returned 1
        1:  368:}
