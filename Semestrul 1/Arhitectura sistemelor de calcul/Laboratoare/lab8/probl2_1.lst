     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf            ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 00000000                    a dd 0
    16 00000004 0000                        b dw 0
    17 00000006 0000                        rezultat dw 0
    18 00000008 256400                      format_dword db "%d", 0
    19 0000000B 25686400                    format_word db "%hd", 0
    20 0000000F 41203D2000                  mess1 db "A = ",0
    21 00000014 42203D2000                  mess2 db "B = ",0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 68[0F000000]                    push dword mess1
    27 00000005 FF15[00000000]                  call [printf]
    28 0000000B 83C404                          add esp, 4
    29                                          
    30 0000000E 68[00000000]                    push dword a
    31 00000013 68[08000000]                    push dword format_dword
    32 00000018 FF15[00000000]                  call [scanf]
    33 0000001E 83C408                          add esp, 4*2
    34                                          
    35 00000021 68[14000000]                    push dword mess2
    36 00000026 FF15[00000000]                  call [printf]
    37 0000002C 83C404                          add esp , 4 
    38                                          
    39 0000002F 68[04000000]                    push dword b
    40 00000034 68[0B000000]                    push dword format_word
    41 00000039 FF15[00000000]                  call [scanf]
    42 0000003F 83C408                          add esp, 4*2      
    43                                          
    44 00000042 66A1[00000000]                  mov ax, [a]
    45 00000048 668B15[02000000]                mov dx, [a+2]
    46 0000004F 668B1D[04000000]                mov bx , [b]
    47                                          
    48 00000056 66F7FB                          idiv bx
    49                                          
    50 00000059 66A3[06000000]                  mov [rezultat],AX
    51                                          
    52                                          
    53                                          
    54 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
